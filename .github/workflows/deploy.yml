name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 환경 변수 적용
      - name: Substitute environment variables in application.yml
        run: |
          envsubst < ./src/main/resources/application.yml > ./src/main/resources/application_temp.yml
          mv ./src/main/resources/application_temp.yml ./src/main/resources/application.yml
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_URL: ${{ secrets.DB_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLOVA_OCR_URL: ${{ secrets.CLOVA_OCR_URL }}
          CLOVA_SECRET_KEY: ${{ secrets.CLOVA_SECRET_KEY }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          MAIL_SENDER: ${{ secrets.MAIL_SENDER }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          VALID_URL: ${{ secrets.VALID_URL }}


      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 어플리케이션 Build
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # .env 파일 생성 (Docker build 시 build-arg 전달을 위해)
      - name: Generate .env file for build
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "CLOVA_OCR_URL=${{ secrets.CLOVA_OCR_URL }}" >> .env
          echo "CLOVA_SECRET_KEY=${{ secrets.CLOVA_SECRET_KEY }}" >> .env
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "MAIL_SENDER=${{ secrets.MAIL_SENDER }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "PUBLIC_KEY=${{ secrets.PUBLIC_KEY }}" >> .env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> .env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
          echo "VALID_URL=${{ secrets.VALID_URL }}" >> .env

      # .env 파일의 내용을 동적으로 읽어 build-arg 옵션 생성 후 Docker 이미지 빌드
      - name: Build Docker image with dynamic build args
        run: |
           build_args=$(awk '{print "--build-arg " $0}' .env | xargs)
           echo "Using build arguments: $build_args"
           docker build $build_args -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test .

      # DockerHub Login (push 하기 위해)
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker hub 로 push
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test


  # 위 과정에서 푸시한 이미지를 EC2에서 풀받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -aq -f name=spring-cicd-test)
            if [ -n "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm -f $CONTAINER_ID
            fi
            
            OLD_IMAGE_ID=$(sudo docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test)
            if [ -n "$OLD_IMAGE_ID" ]; then
              sudo docker rmi -f $OLD_IMAGE_ID
            fi
            
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test:latest
            
            PID=$(sudo lsof -t -i:8080)
            if [ -n "$PID" ]; then
              sudo kill -9 $PID
            fi
            
            sudo docker run -d -p 8080:8080 --name spring-cicd-test ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test:latest
            
            sleep 5
            if ! sudo docker ps -f name=spring-cicd-test --format "{{.Status}}" | grep "Up"; then
              sudo docker logs spring-cicd-test
              exit 1
            fi
            
            sudo docker image prune -af