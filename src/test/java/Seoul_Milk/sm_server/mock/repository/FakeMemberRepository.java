package Seoul_Milk.sm_server.mock.repository;

import Seoul_Milk.sm_server.domain.member.entity.MemberEntity;
import Seoul_Milk.sm_server.domain.member.repository.MemberRepository;
import Seoul_Milk.sm_server.global.common.exception.CustomException;
import Seoul_Milk.sm_server.global.common.exception.ErrorCode;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMemberRepository implements MemberRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<MemberEntity> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Optional<MemberEntity> findById(Long id) {
        return data.stream()
                .filter(member -> member.getId().equals(id))
                .findFirst();
    }

    @Override
    public MemberEntity getById(Long id) {
        return findById(id).orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_EXIST));
    }

    @Override
    public Optional<MemberEntity> findByEmployeeId(String employeeId) {
        return data.stream()
                .filter(member -> member.getEmployeeId().equals(employeeId))
                .findFirst();
    }

    @Override
    public MemberEntity getByEmployeeId(String employeeId) {
        return findByEmployeeId(employeeId).orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_EXIST));
    }

    @Override
    public Optional<MemberEntity> findByEmail(String email) {
        return data.stream()
                .filter(member -> member.getEmail() != null && member.getEmail().equals(email))
                .findFirst();
    }

    @Override
    public Boolean existsByEmployeeId(String employeeId) {
        return data.stream()
                .anyMatch(member -> member.getEmployeeId().equals(employeeId));
    }

    @Override
    public MemberEntity save(MemberEntity memberEntity) {
        if (memberEntity.getId() == null || memberEntity.getId() == 0) {
            Long newId = autoGeneratedId.getAndIncrement();

            MemberEntity newMemberEntity = MemberEntity.builder()
                    .id(newId)
                    .employeeId(memberEntity.getEmployeeId())
                    .name(memberEntity.getName())
                    .email(memberEntity.getEmail())
                    .password(memberEntity.getPassword())
                    .role(memberEntity.getRole())
                    .build();

            data.add(newMemberEntity);
            return newMemberEntity;
        } else {
            deleteById(memberEntity.getId());
            data.add(memberEntity);
            return memberEntity;
        }
    }

    private void deleteById(Long id) {
        data.removeIf(memberEntity -> memberEntity.getId().equals(id));
    }
}
