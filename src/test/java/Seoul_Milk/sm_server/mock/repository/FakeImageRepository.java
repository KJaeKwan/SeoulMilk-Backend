package Seoul_Milk.sm_server.mock.repository;

import Seoul_Milk.sm_server.domain.image.entity.Image;
import Seoul_Milk.sm_server.domain.image.repository.ImageRepository;
import Seoul_Milk.sm_server.domain.member.entity.MemberEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeImageRepository implements ImageRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Image> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Page<Image> searchTempImages(MemberEntity member, Pageable pageable) {
        List<Image> tempImages = data.stream()
                .filter(image -> image.isTemporary() && image.getMember().equals(member))
                .collect(Collectors.toList());

        int start = (int) pageable.getOffset();
        int end = Math.min(start + pageable.getPageSize(), tempImages.size());

        return new PageImpl<>(tempImages.subList(start, end), pageable, tempImages.size());
    }

    @Override
    public void saveAll(List<Image> images) {
        for (Image image : images) {
            if (image.getId() == null || image.getId() == 0) {
                Long newId = autoGeneratedId.getAndIncrement();

                Image newImage = Image.builder()
                        .id(newId)
                        .imageUrl(image.getImageUrl())
                        .temporary(image.isTemporary())
                        .member(image.getMember())
                        .build();

                data.add(newImage);
            } else {
                deleteById(image.getId());
                data.add(image);
            }
        }
    }

    @Override
    public List<Image> findByMemberAndIds(MemberEntity member, List<Long> imageIds) {
        return data.stream()
                .filter(image -> imageIds.contains(image.getId()) && image.getMember().equals(member))
                .filter(Image::isTemporary)
                .toList();
    }

    private void deleteById(Long id) {
        data.removeIf(image -> image.getId().equals(id));
    }

}
