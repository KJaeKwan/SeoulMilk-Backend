package Seoul_Milk.sm_server.mock.repository;

import Seoul_Milk.sm_server.domain.taxInvoice.entity.TaxInvoice;
import Seoul_Milk.sm_server.domain.taxInvoiceFile.entity.TaxInvoiceFile;
import Seoul_Milk.sm_server.domain.taxInvoiceFile.repository.TaxInvoiceFileRepository;
import jakarta.persistence.Column;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

public class FakeTaxInvoiceFileRepository implements TaxInvoiceFileRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<TaxInvoiceFile> data = Collections.synchronizedList(new ArrayList<>());
    @Override
    public TaxInvoiceFile save(TaxInvoiceFile taxInvoiceFile) {
        if (taxInvoiceFile.getId() == null || taxInvoiceFile.getId() == 0) {
            TaxInvoiceFile newTaxInvoiceFile = TaxInvoiceFile.builder()
                            .id(autoGeneratedId.incrementAndGet())
                            .taxInvoice(taxInvoiceFile.getTaxInvoice())
                            .fileUrl(taxInvoiceFile.getFileUrl())
                            .fileType(taxInvoiceFile.getFileType())
                            .originalFileName(taxInvoiceFile.getOriginalFileName())
                            .fileSize(taxInvoiceFile.getFileSize())
                            .build();
            data.add(newTaxInvoiceFile);
            return newTaxInvoiceFile;
        } else {
            delete(taxInvoiceFile.getId());
            data.add(taxInvoiceFile);
            return taxInvoiceFile;
        }
    }

    public void delete(Long id){
        data.removeIf(taxInvoiceFile ->taxInvoiceFile.getId().equals(id));
    }
}
